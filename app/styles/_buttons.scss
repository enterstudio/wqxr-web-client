/**
 * stacked button group
 * the idea is to create a module that wraps buttons and botton like objects
 * so that they can be stacked vertically, aligned center, and the container
 * object is as wide as the widest child.
 * It's this last bit which is tough to do strictly in CSS, but it does seem
 * to work when the .btn-group--stacked is a flex-child itself.
 */
.btn-group--stacked {
  @include display-flex;
  @include flex-direction(column);

  > .btn {
    margin-right: 0;
    margin-bottom: 10px; // should update with global _var
    text-align: center;

    &:last-child {
      margin-bottom: 0;
    }
  }

  > .dropdown > .btn {
    width: 100%;
  }
}

.btn--studio360-override {
  font-weight: 600 !important;
  letter-spacing: 2px;
  max-width: 120px;

  > a {
    margin-top: 10px !important;
    font-family: "Open Sans", sans-serif !important;
    color: white !important;
    line-height: initial !important;
  }
}
/***
 * Buttons:
 */

/**
 * Button:
 * `.btn`
 * A base for all buttons. Not much to look at.
 *
 *      @example
 *      button.btn Click Me
 */
@mixin btn {
    position: relative; // for transition icons
    display: inline-block;
    border-radius: 25px;
    border: 2px solid;
    border-color: rgba($lightgray, .2);

    padding: 0px 13px;
    color: $lightgray;
    background: transparent;
    @include fontsize(14);
    line-height: 34px;

    cursor: pointer;

    @include transition(
      opacity $transition-timing,
      background-color $transition-timing,
      border-color $transition-timing,
      color $transition-timing);

    &:hover,
    &:focus {
      border-color: rgba($darkgray, .2);
      color: $gray;
      opacity: 1;
    }

    &[disabled] {
      opacity: 0.15;
    }
}

.btn {
  @include btn;
}

/**
 * Heavy Button:
 * `.btn--heavy`
 * Make the button bold.
 *
 *      @example
 *      button.btn.btn--heavy Something to Emphasize
 */
.btn--heavy {
  font-weight: 600;
  letter-spacing: 1px;
}

/**
 * Blank Button:
 * `.btn--blank`
 * An empty button. Useful for icons or interactive buttons
 * to be style other ways
 *
 *      @example
 *      button.btn.btn--blank I'm a button but I look like nothing special
 */
.btn--blank {
    padding: 0;
    border: 0;
    border-radius: 0;
    color: #333;
    // IE doesn't support initial
    color: initial;
    text-align: left;
    background-color: transparent;

    &:hover,
    &:focus {
      background: none;
      border: none;
      color: inherit;
    }
}

/**
 * Large Button:
 * `.btn--large`
 * It's a little bigger than your standard button.
 *
 *      @example
 *      button.btn.btn--large Click Me, I'm Bigger!
 */
@mixin btn--large {
  padding: 3px 18px;
  line-height: 36px;
  @include fontsize(20);
}

.btn--large {
  @include btn--large;
}


/**
 * Medium Button:
 * `.btn--medium`
 * It's a little mediumer than your standard button.
 *
 *      @example
 *      button.btn.btn--medium Just Right.
 */
.btn--medium {
    padding: 0px 16px;
    line-height: 50px;
}

/**
 * Small Button:
 * `.btn--small`
 * It's a little smaller than your standard button.
 *
 *      @example
 *      button.btn.btn--small Can you see me? I'm small.
 */
.btn--small {
    padding: 0 5px;
    line-height: 20px;
}

/**
 * Circle Button:
 * `.btn--circle`
 * Good for icons.
 *
 *      @example
 *      button.btn.btn--circle
 *          i.fa.fa-twitter
 */
@mixin btn--circle {
    border-radius: 50%;
    width: 36px;
    height: 36px;
    padding: 0;
    text-align: center;
}

.btn--circle {
  @include btn--circle;
}

/**
 * Fat Button:
 * `.btn--fat`
 * When that small circle button is an important call to action.
 *
 *      @example
 *      button.btn.btn--circle.btn--fat
 *          i.fa.fa-twitter
 */
@mixin btn--fat {
    width: 40px;
    height: 40px;

    .fa {
      font-size: 18px;
    }

}

.btn--fat {
  @include btn--fat;
}

/**
 * Squared Off Button:
 * `.btn--squared`
 * Squared off button with rounded corners.
 *
 *      @example
 *      button.btn.btn--squared Submit
 */
.btn--squared {
    border-radius: 6px;
    padding: 0 8px;
}

/**
 * Strict Square Button:
 * `.btn--strictsquare`
 * No rounded corners whatsoever.
 *
 *      @example
 *      button.btn.btn--strictsquare Enter
 */
.btn--strictsquare {
    border-radius: 0;
}

/**
 * Square Button:
 * `.btn--square-small`
 * A 45px width and height button.
 *
 *      @example
 *      button.btn.btn--strictsquare.btn--square-small Hi
 */
.btn--square-small {
    width: 45px;
    height: 45px;
}

/**
 * White Button:
 * `.btn--white`
 *
 *      @example
 *      .l-full(style="background-color: rgba(0,0,0,0.15)")
 *          button.btn.btn--white Useful on a dark background
 */
.btn--white {
    color: white;
    border-color: rgba(white, .2);

    &:hover,
    &:focus {
      color: white;
      border-color: rgba(white,.7);
    }
}

.btn--whitetext {
  color: white;
}

/**
 * Pink Button:
 * `.btn--pink`
 * Make your button stand out with a pink background
 *
 *      @example
 *      button.btn.btn--pink You Know You Want to Click
 */
.btn--pink {
    background-color: $pink;
    border-color: $pink;
    color: white;

    &:hover,
    &:focus {
        color: white;
    }
}

/**
 * Button with Pink Text:
 * `.btn--pinktext`
 * A regular button but the text is pink.
 *
 *      @example
 *      button.btn.btn--pinktext Click Here
 */
.btn--pinktext {
    color: $pink;
}

/**
 * Blue Button:
 * `.btn--blue`
 *
 *      @example
 *      button.btn.btn--blue Click
 */
@mixin btn--blue {
  background-color: $blue;
  border-color: $blue;
  color: white;

  &:hover,
  &:focus {
    outline: none;
    background-color: $darkblue;
    border-color: $darkblue;
    color: white;
    opacity: 1;
  }
}

.btn--blue {
  @include btn--blue;
}

/**
 * Button with Blue Text:
 * `.btn--bluetext`
 * A regular button but the text is blue.
 *
 *      @example
 *      button.btn.btn--bluetext Click Here
 */
.btn--bluetext {
    color: $blue;
}

/**
 * Green Button:
 * `.btn--green`
 *
 *      @example
 *      button.btn.btn--green Click
 */
.btn--green {
    background-color: $lightgreen;
    border-color: $lightgreen;
    color: $darkgray;

    &:hover,
    &:focus {
      background-color: $darkgreen;
      border-color: $darkgreen;
      color: $lightgreen;
    }
}

/**
 * Black Button:
 * `.btn--black`
 *
 *      @example
 *      button.btn.btn--black Click Here
 */
.btn--black {
    color: white;
    background-color: black;
    border-color: black;

    &:hover,
    &:focus {
      background-color: $pink;
      border-color: $pink;
      color: white;
    }
}

/**
 * Button with Black Text:
 * `.btn--blacktext`
 *
 *      @example
 *      button.btn.btn--blacktext Submit Comment
 */
.btn--blacktext {
    color: $darkergray;

    &:hover,
    &:focus {
        color: $pink;
    }

    &.active {
        color: black;
    }
}

/**
 * Media Query Buttons:
 * Sometimes we need to change a button's colors based on the current MQ.
 * These should be created according to special MQ cases.
 */

/**
 * `.btn--mq-graywhite`
 * Gray/White MQ Button
 *
 *      @example
 *      button.btn.btn--mq-graywhite Gray at Narrow. White at wide.
 */
.btn--mq-graywhite {
  @include mq($medium-and-up) {
    color: white;
    border-color: rgba(255,255,255,.2);

    &:hover,
    &:focus {
      color: white;
      border-color: rgba(255,255,255,.7);
    }
  }
}

/**
 * Button Link:
 * `.btn--link`
 * If you have you a button that should look
 * like a regular link, use this modifier
 *
 *      @example
 *      button.btn.btn--link Show Comments
 */
.btn--link {
    color: #333;
    background-color: transparent;
    border-radius: 0;
    border: none;
    border-bottom: 1px solid rgba(204,204,204,0.8);
    padding: 0;
    font-weight: normal;
    letter-spacing: normal;
    // IE doesn't support intial
    letter-spacing: initial;
    @include fontsize($base-font);
    line-height: #{$line-height}px;

    &:hover,
    &:focus {
      color: $blue;
      background-color: transparent;
      border-color: rgba(204,204,204,0.8);
    }
}

/**
 * Button Link with Icon:
 * If you've got a button that should look like a link,
 * and you want to include an icon, you can add `.btn--linkicon`
 * to the `<button>`, and wrap the link text in a span.
 *
 * Also include `.btn--icon` for proper spacing after the icon.
 *
 *      @example
 *      button.btn.btn--icon.btn--link.btn--linkicon
 *          i.fa.fa-comment
 *          span 2 Comments
 */
.btn--linkicon {
    border: none;

    > span {
        border-bottom: 1px solid rgba(204,204,204,0.8);
    }

    // beta maybe later button
    &.btn--white {
      > span {
        border-color: rgba(white, 0);
        color: white;
      }

      &:hover,
      &:focus {
        > span {
          color: white;
          border-color: rgba(white, 1);
        }
      }

      &:active {
        opacity: 0.60;
      }

      @include transition(opacity 125ms ease, border-color 125ms ease);
    }
}

/**
 * Button Group:
 * Group some buttons together and they will line up nicely
 *
 *      @example
 *      .btn-group
 *          button.btn.btn--large Listen
 *          button.btn Queue
 *          button.btn.btn--circle
 *              i.fa.fa-ellipsis-h
 */
.btn-group {
    font-size: 0;

    > * {
        margin-right: 10px;
        vertical-align: middle;
        display: inline-block;
    }

    > :last-child {
        margin-right: 0;
    }
}

.btn-group--withvr{

    > * {
        @extend %vertical-rhythm;

        @include mq($medium-and-up) {
            margin-bottom: 0;
        }
    }
}

.btn-group--closer {
  > * {
    margin-right: 7px;
  }
}

/**
 * Toggle Button:
 * `.btn--toggle > .btn-togglecontent`
 * When a button has content you want to want to toggle on clicks, use these
 * classes. They can applied directly to buttons used for other purposes
 * such as accordions or tabs and will not interrupt functionality.
 *
 * The important thing is to add a data-state attribute set to either `first` or
 * `second`. This corresponds to which child will be displayed by default.
 *
 * Requires `js/overhaul/main.js` but should probably split into its own mod.
 *
 *      @example
 *      button.btn.btn--toggle.js-toggleButton(data-state="first")
 *          .btn-togglecontent Toggle State 1
 *          .btn-togglecontent Toggle State 2
 */
.btn--toggle {
    position: relative;
    // override base `.btn` transition so there is no
    // conflict with the btn-togglecontent transitions
    //@include transition(none);
}

.btn-togglecontent {
    @include transition(all 150ms ease);

    &:first-child {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
    }
}

.btn--block {
    display: block;
    padding: 8px;
    width: 100%;
}

@mixin btn--smalltext {
  @include fontsize(12);
}

.btn--smalltext {
  @include btn--smalltext;
}

.btn--bigtext {
  @include fontsize(20);
}

.btn--upper {
  text-transform: uppercase;
}

@mixin btn--strongtext {
  letter-spacing: 1px;
  font-weight: 600;
}

.btn--strongtext {
  @include btn--strongtext;
}

@mixin thickbtn {
  border-width: 2px;

  &.btn--white {
    border-color: white;
    background-color: rgba(white, 0);

    &:hover,
    &:focus {
      border-color: white;
      background-color: rgba(white, 0.15);
    }

    &:active {
      opacity: 0.60;
    }
  }
}

.thickbtn {
  @include thickbtn;
}

// Ember Button Components
.queue-button {
  @include btn;
  @include btn--strongtext;
  @include btn--smalltext;
  @include thickbtn;

  &.gray-to-white {
    border-color: rgba(136, 136, 136, 0.2);
    color: rgba(51, 51, 51, 1);

    &:hover {
      border-color: rgba(136, 136, 136, 0.5);
    }

    &.is-hovering {
      border-color: rgba(136, 136, 136, 0.5);
    }

    @include mq($small-and-up) {
      border-color: rgba(136, 136, 136, 0.6);
      color: rgba(255, 255, 255, 1);

      &:hover {
        border-color: rgba(136, 136, 136, 0.6);
        color: rgba(255, 255, 255, 1);
      }

      &.is-hovering {
        border-color: rgba(255, 255, 255, 1);
      }
    }
    
  }

  &.just-gray {
    border-color: rgba(136, 136, 136, 0.3);
    color: rgba(51, 51, 51, 1);

    &:hover {
      border-color: rgba(136, 136, 136, 0.3);
      color: rgba(136, 136, 136, 1);
    }

    &.is-hovering {
      border-color: rgba(136, 136, 136, 0.5);
      color: rgba(51, 51, 51, 1);
    }
  }

  &.small-blue {
    @include btn;
    @include btn--circle;
    @include btn--fat;

    &:focus,
    &:hover {
      border-color: rgba($darkgray, .2);
      color: $gray;
      opacity: 1;
    }

    &.is-hovering {
      border-color: rgba($darkgray, .2);
      color: $gray;
      opacity: 1;
    }
  }
}

@mixin gray-svg {
  polygon, rect, circle, path {
    fill: rgba(136, 136, 136, 1);
  }
}

@mixin white-svg {
  polygon, rect, circle, path {
    fill: white;
  }
}

@mixin blue-svg {
  polygon, rect, circle, path {
    fill: #128cf4;
  }
}

.listen-button {
  position: relative;

  .l-holygrail-right > & {
    @include align-self(center);
  }

  &.blue-boss,
  &.blue-minion,
  &.blue-circle {
    @include btn;
    @include btn--blue;
    @include btn--strongtext;

    @include transition(
      width 200ms cubic-bezier(.17,.89,.39,1.25),
      opacity $transition-timing,
      background-color $transition-timing,
      border-color $transition-timing,
      color $transition-timing);
  }

  &.blue-boss,
  &.blue-minion {
    white-space: nowrap; // helps transitions
    overflow: hidden;

    &:focus,
    &:hover {
      background-color: $blue;
      border-color: $blue;
    }

    &.is-hovering {
      background-color: $darkblue;
      border-color: $darkblue;
    }

    &.is-loading,
    &.is-playing {
      @include transition(
        width 200ms cubic-bezier(1, 0, 0, 1),
        opacity $transition-timing,
        background-color $transition-timing,
        border-color $transition-timing,
        color $transition-timing);

      padding-left: 0;
      padding-right: 0;
    }
  }

  &.blue-boss {
    @include btn--large;
    padding-left: 13px;
  }

  &.blue-circle {
    @include btn--circle;
    @include btn--fat;
  }

  &.blue-hollow {
    width: 44px;
    height: 44px;
  }

  &.white-hollow {
    width: 48px;

    @include mq($wide) {
      width: 55px;
    }
  }

  &.gray-minion {
    @include btn;
    @include btn--large;
    @include btn--strongtext;
    @include btn--smalltext;
    @include thickbtn;

    @include transition(
      width 200ms cubic-bezier(.17,.89,.39,1.25),
      opacity $transition-timing,
      background-color $transition-timing,
      border-color $transition-timing,
      color $transition-timing);

    white-space: nowrap; // helps transitions
    overflow: hidden;

    border-color: rgba(136, 136, 136, 0.3);
    color: rgba(136, 136, 136, 1);

    &:hover {
      border-color: rgba(136, 136, 136, 0.3);
      color: rgba(136, 136, 136, 1);
    }

    &.is-hovering {
      border-color: rgba(68, 68, 68, 0.5);
      color: #666;
    }

    &.is-loading,
    &.is-playing {
      @include transition(
        width 200ms cubic-bezier(1, 0, 0, 1),
        opacity $transition-timing,
        background-color $transition-timing,
        border-color $transition-timing,
        color $transition-timing);

      padding-left: 0;
      padding-right: 0;
    }
  }
}

.listen-ui {
  display: inline-block;
  position: relative;

  .blue-boss &,
  .blue-minion & {
    width: 18px;
    margin-right: 2px;
  }

  .blue-minion & {
    @include scale(0.6, 0.6);
  }

  .blue-circle & {
    width: 18px;
    @include scale(0.8, 0.8);
  }

  .blue-hollow & {
    width: 44px;
  }

  .white-hollow & {
    width: 48px;

    @include mq($wide) {
      width: 55px;
    }
  }

  > svg {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    margin: auto;
    @include transition(opacity 0.3s ease-in-out, fill 0.2s ease-in-out);
  }

  .blue-boss & > svg,
  .blue-minion & > svg,
  .blue-circle & > svg {
    @include white-svg;
    width: 16px;
  }

  .blue-hollow & > svg {
    @include blue-svg;
    width: 44px;
    height: 44px;
  }

  .blue-hollow:hover &,
  .blue-hollow:focus & {
    polygon, rect, circle, path {
      fill: #1068b2;
    }
  }

  .blue-hollow:active & {
    polygon, rect, circle, path {
      fill: #013f73;
    }
  }

  .white-hollow & > svg {
    @include white-svg;
    width: 48px;

    @include mq($wide) {
      width: 55px;
      height: 55px;
    }
  }

  .white-hollow:hover &,
  .white-hollow:focus & {
    polygon, rect, circle, path {
      fill: #ccc;
    }
  }

  .white-hollow:active & {
    @include blue-svg;
  }

  .gray-minion & > svg {
    @include gray-svg;
    width: 12px;
  }

  .icon--pause {
    opacity: 0;
  }
  .listen-spinner {
    &:before,
    &:after {
      opacity: 0;
    }
  }

  .is-loading & {
    width: 100%;

    .listen-spinner {
      &:before,
      &:after {
        opacity: 1;
      }
    }

    .icon--pause,
    .icon--play {
      opacity: 0;
    }
  }

  .is-playing & {
    width: 100%;

    .icon--pause {
      opacity: 1;
    }

    .icon--play {
      opacity: 0;
    }
    .listen-spinner {
      &:before,
      &:after {
        opacity: 0;
      }
    }
  }
}

.listen-spinner {
  display: inline-block;
  @include transition(opacity 150ms ease);

  .blue-boss &,
  .blue-minion &,
  .blue-circle & {
    &:before {
      @include outer-spinner(
        $primary: rgba(255, 255, 255, 0),
        $accent: white
      );
    }

    &:after {
      @include inner-spinner(
        $primary: rgba(255, 255, 255, 0),
        $accent: white
      );
    }
  }

  .blue-hollow & {
    &:before {
      @include outer-spinner(
        $primary: rgba(255, 255, 255, 0),
        $accent: #128cf4
      );
    }

    &:after {
      @include inner-spinner(
        $primary: rgba(255, 255, 255, 0),
        $accent: #128cf4
      );
    }
  }

  .white-hollow & {
    &:before {
      @include outer-spinner(
        $primary: rgba(255, 255, 255, 0),
        $accent: rgba(255, 255, 255, 0.2)
      );
    }

    &:after {
      @include inner-spinner(
        $primary: rgba(255, 255, 255, 0),
        $accent: rgba(255, 255, 255, 0.2)
      );
    }
  }

  &.blue-hollow {
    width: 44px;
    height: 44px;
  }

  &.white-hollow {
    width: 48px;

    @include mq($wide) {
      width: 55px;
    }
  }

  &.gray-minion {
    @include btn;
    @include btn--large;
    @include btn--strongtext;
    @include btn--smalltext;
    @include thickbtn;

    @include transition(
      width 200ms cubic-bezier(.17,.89,.39,1.25),
      opacity $transition-timing,
      background-color $transition-timing,
      border-color $transition-timing,
      color $transition-timing);

    white-space: nowrap; // helps transitions
    overflow: hidden;

    border-color: rgba(136, 136, 136, 0.3);
    color: rgba(136, 136, 136, 1);

    &:hover {
      border-color: rgba(136, 136, 136, 0.3);
      color: rgba(136, 136, 136, 1);
    }

    &.is-hovering {
      border-color: rgba(68, 68, 68, 0.5);
      color: #666;
    }

    &.is-loading,
    &.is-playing {
      @include transition(
        width 200ms cubic-bezier(1, 0, 0, 1),
        opacity $transition-timing,
        background-color $transition-timing,
        border-color $transition-timing,
        color $transition-timing);

      padding-left: 0;
      padding-right: 0;
    }
  }
}

.listen-ui {
  display: inline-block;
  position: relative;

  .blue-boss &,
  .blue-minion & {
    width: 18px;
    margin-right: 4px;
  }

  .blue-minion & {
    @include scale(0.6, 0.6);
  }

  .blue-circle & {
    width: 18px;
    @include scale(0.8, 0.8);
  }

  .blue-hollow & {
    width: 44px;
  }

  .white-hollow & {
    width: 48px;

    @include mq($wide) {
      width: 55px;
    }
  }

  > svg {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    margin: auto;
    @include transition(opacity 0.3s ease-in-out, fill 0.2s ease-in-out);
  }

  .blue-boss & > svg,
  .blue-minion & > svg,
  .blue-circle & > svg {
    @include white-svg;
    width: 18px;
  }

  .blue-hollow & > svg {
    @include blue-svg;
    width: 44px;
    height: 44px;
  }

  .blue-hollow:hover &,
  .blue-hollow:focus & {
    polygon, rect, circle, path {
      fill: #1068b2;
    }
  }

  .blue-hollow:active & {
    polygon, rect, circle, path {
      fill: #013f73;
    }
  }

  .white-hollow & > svg {
    @include white-svg;
    width: 48px;

    @include mq($wide) {
      width: 55px;
      height: 55px;
    }
  }

  .white-hollow:hover &,
  .white-hollow:focus & {
    polygon, rect, circle, path {
      fill: #ccc;
    }
  }

  .white-hollow:active & {
    @include blue-svg;
  }

  .gray-minion & > svg {
    @include gray-svg;
    width: 12px;
  }

  .icon--pause,
  .listen-spinner {
    opacity: 0;
  }

  .is-loading & {
    width: 100%;

    .listen-spinner {
      opacity: 1;
    }

    .icon--pause,
    .icon--play {
      opacity: 0;
    }
  }

  .is-playing & {
    width: 100%;

    .icon--pause {
      opacity: 1;
    }

    .icon--play,
    .listen-spinner {
      opacity: 0;
    }
  }
}

.listen-spinner {
  display: inline-block;
  @include transition(opacity 150ms ease);

  .blue-boss &,
  .blue-minion &,
  .blue-circle & {
    &:before {
      @include outer-spinner(
        $primary: rgba(255, 255, 255, 0),
        $accent: white
      );
    }

    &:after {
      @include inner-spinner(
        $primary: rgba(255, 255, 255, 0),
        $accent: white
      );
    }
  }

  .blue-hollow & {
    &:before {
      @include outer-spinner(
        $primary: rgba(255, 255, 255, 0),
        $accent: #128cf4
      );
    }

    &:after {
      @include inner-spinner(
        $primary: rgba(255, 255, 255, 0),
        $accent: #128cf4
      );
    }
  }

  .white-hollow & {
    &:before {
      @include outer-spinner(
        $primary: rgba(255, 255, 255, 0),
        $accent: rgba(255, 255, 255, 0.2)
      );
    }

    &:after {
      @include inner-spinner(
        $primary: rgba(255, 255, 255, 0),
        $accent: rgba(255, 255, 255, 0.2)
      );
    }
  }
}
